openapi: 3.0.0
info:
  title: Directus API
  version: 1.0.0
  description: >-
    Documentation auto-g√©n√©r√©e √† partir des collections Directus.

    ‚ö° Inclus uniquement les endpoints `/items/{collection}` et
    l'authentification.

    Toutes les descriptions sont enrichies pour mieux comprendre les actions
    disponibles.
servers:
  - url: http://localhost:8125
paths:
  /auth/login:
    post:
      summary: Authentification
      description: >-
        Permet de se connecter avec email/mot de passe et r√©cup√©rer un token
        JWT.

        ‚û°Ô∏è Ce token doit √™tre utilis√© ensuite comme `Authorization: Bearer
        <token>`.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  example: admin@example.com
                password:
                  type: string
                  example: ‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢
              required:
                - email
                - password
      responses:
        "200":
          description: Connexion r√©ussie, retourne un JWT
        "401":
          description: Identifiants invalides
      security: []
  /items/abonnements:
    get:
      summary: Lister les abonnements
      description: |-
        R√©cup√®re tous les enregistrements de la collection **abonnements**.

        üîç Options possibles :
        - **limit** : limiter le nombre de r√©sultats
        - **offset** : d√©caler pour la pagination
        - **sort** : trier par champ (ex: field1,-field2)
        - **filter** : appliquer des filtres complexes en JSON
      parameters:
        - name: limit
          in: query
          schema:
            type: integer
          description: Nombre max de r√©sultats
        - name: offset
          in: query
          schema:
            type: integer
          description: D√©calage pour la pagination
        - name: sort
          in: query
          schema:
            type: string
          description: "Tri (ex: field1,-field2)"
        - name: filter
          in: query
          schema:
            type: string
          description: Filtres en JSON
      responses:
        "200":
          description: Liste des enregistrements de la collection **abonnements**
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/abonnements"
    post:
      summary: Cr√©er un nouvel √©l√©ment dans abonnements
      description: >-
        Ajoute un enregistrement dans la collection **abonnements**.

        ‚ö†Ô∏è Pour les champs relationnels (many-to-many), cela ajoute un lien
        entre les deux collections.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/abonnements"
      responses:
        "201":
          description: Un nouvel enregistrement a √©t√© cr√©√© dans **abonnements**.
  /items/abonnements/{id}:
    get:
      summary: Obtenir un abonnements par ID
      description: Retourne un enregistrement unique de la collection **abonnements**
        via son ID.
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Enregistrement de la collection **abonnements** trouv√©
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/abonnements"
    patch:
      summary: Mettre √† jour un abonnements
      description: >-
        Met √† jour un enregistrement existant dans la collection
        **abonnements**.

        ‚ö†Ô∏è Pour les relations many-to-many, vous pouvez modifier les
        associations.
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/abonnements"
      responses:
        "200":
          description: L'enregistrement de **abonnements** a √©t√© mis √† jour.
    delete:
      summary: Supprimer un abonnements
      description: Supprime d√©finitivement un enregistrement de la collection
        **abonnements** par ID.
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        "204":
          description: L'enregistrement de **abonnements** a √©t√© supprim√©.
  /items/actualites:
    get:
      summary: Lister les actualites
      description: |-
        R√©cup√®re tous les enregistrements de la collection **actualites**.

        üîç Options possibles :
        - **limit** : limiter le nombre de r√©sultats
        - **offset** : d√©caler pour la pagination
        - **sort** : trier par champ (ex: field1,-field2)
        - **filter** : appliquer des filtres complexes en JSON
      parameters:
        - name: limit
          in: query
          schema:
            type: integer
          description: Nombre max de r√©sultats
        - name: offset
          in: query
          schema:
            type: integer
          description: D√©calage pour la pagination
        - name: sort
          in: query
          schema:
            type: string
          description: "Tri (ex: field1,-field2)"
        - name: filter
          in: query
          schema:
            type: string
          description: Filtres en JSON
      responses:
        "200":
          description: Liste des enregistrements de la collection **actualites**
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/actualites"
    post:
      summary: Cr√©er un nouvel √©l√©ment dans actualites
      description: >-
        Ajoute un enregistrement dans la collection **actualites**.

        ‚ö†Ô∏è Pour les champs relationnels (many-to-many), cela ajoute un lien
        entre les deux collections.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/actualites"
      responses:
        "201":
          description: Un nouvel enregistrement a √©t√© cr√©√© dans **actualites**.
  /items/actualites/{id}:
    get:
      summary: Obtenir un actualites par ID
      description: Retourne un enregistrement unique de la collection **actualites**
        via son ID.
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Enregistrement de la collection **actualites** trouv√©
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/actualites"
    patch:
      summary: Mettre √† jour un actualites
      description: >-
        Met √† jour un enregistrement existant dans la collection **actualites**.

        ‚ö†Ô∏è Pour les relations many-to-many, vous pouvez modifier les
        associations.
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/actualites"
      responses:
        "200":
          description: L'enregistrement de **actualites** a √©t√© mis √† jour.
    delete:
      summary: Supprimer un actualites
      description: Supprime d√©finitivement un enregistrement de la collection
        **actualites** par ID.
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        "204":
          description: L'enregistrement de **actualites** a √©t√© supprim√©.
  /items/articles:
    get:
      summary: Lister les articles
      description: |-
        R√©cup√®re tous les enregistrements de la collection **articles**.

        üîç Options possibles :
        - **limit** : limiter le nombre de r√©sultats
        - **offset** : d√©caler pour la pagination
        - **sort** : trier par champ (ex: field1,-field2)
        - **filter** : appliquer des filtres complexes en JSON
      parameters:
        - name: limit
          in: query
          schema:
            type: integer
          description: Nombre max de r√©sultats
        - name: offset
          in: query
          schema:
            type: integer
          description: D√©calage pour la pagination
        - name: sort
          in: query
          schema:
            type: string
          description: "Tri (ex: field1,-field2)"
        - name: filter
          in: query
          schema:
            type: string
          description: Filtres en JSON
      responses:
        "200":
          description: Liste des enregistrements de la collection **articles**
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/articles"
    post:
      summary: Cr√©er un nouvel √©l√©ment dans articles
      description: >-
        Ajoute un enregistrement dans la collection **articles**.

        ‚ö†Ô∏è Pour les champs relationnels (many-to-many), cela ajoute un lien
        entre les deux collections.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/articles"
      responses:
        "201":
          description: Un nouvel enregistrement a √©t√© cr√©√© dans **articles**.
  /items/articles/{id}:
    get:
      summary: Obtenir un articles par ID
      description: Retourne un enregistrement unique de la collection **articles** via
        son ID.
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Enregistrement de la collection **articles** trouv√©
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/articles"
    patch:
      summary: Mettre √† jour un articles
      description: >-
        Met √† jour un enregistrement existant dans la collection **articles**.

        ‚ö†Ô∏è Pour les relations many-to-many, vous pouvez modifier les
        associations.
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/articles"
      responses:
        "200":
          description: L'enregistrement de **articles** a √©t√© mis √† jour.
    delete:
      summary: Supprimer un articles
      description: Supprime d√©finitivement un enregistrement de la collection
        **articles** par ID.
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        "204":
          description: L'enregistrement de **articles** a √©t√© supprim√©.
  /items/articles_tags:
    get:
      summary: Lister les articles_tags
      description: |-
        R√©cup√®re tous les enregistrements de la collection **articles_tags**.

        üîç Options possibles :
        - **limit** : limiter le nombre de r√©sultats
        - **offset** : d√©caler pour la pagination
        - **sort** : trier par champ (ex: field1,-field2)
        - **filter** : appliquer des filtres complexes en JSON
      parameters:
        - name: limit
          in: query
          schema:
            type: integer
          description: Nombre max de r√©sultats
        - name: offset
          in: query
          schema:
            type: integer
          description: D√©calage pour la pagination
        - name: sort
          in: query
          schema:
            type: string
          description: "Tri (ex: field1,-field2)"
        - name: filter
          in: query
          schema:
            type: string
          description: Filtres en JSON
      responses:
        "200":
          description: Liste des enregistrements de la collection **articles_tags**
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/articles_tags"
    post:
      summary: Cr√©er un nouvel √©l√©ment dans articles_tags
      description: >-
        Ajoute un enregistrement dans la collection **articles_tags**.

        ‚ö†Ô∏è Pour les champs relationnels (many-to-many), cela ajoute un lien
        entre les deux collections.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/articles_tags"
      responses:
        "201":
          description: Un nouvel enregistrement a √©t√© cr√©√© dans **articles_tags**.
  /items/articles_tags/{id}:
    get:
      summary: Obtenir un articles_tags par ID
      description: Retourne un enregistrement unique de la collection
        **articles_tags** via son ID.
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Enregistrement de la collection **articles_tags** trouv√©
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/articles_tags"
    patch:
      summary: Mettre √† jour un articles_tags
      description: >-
        Met √† jour un enregistrement existant dans la collection
        **articles_tags**.

        ‚ö†Ô∏è Pour les relations many-to-many, vous pouvez modifier les
        associations.
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/articles_tags"
      responses:
        "200":
          description: L'enregistrement de **articles_tags** a √©t√© mis √† jour.
    delete:
      summary: Supprimer un articles_tags
      description: Supprime d√©finitivement un enregistrement de la collection
        **articles_tags** par ID.
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        "204":
          description: L'enregistrement de **articles_tags** a √©t√© supprim√©.
  /items/articles_translations:
    get:
      summary: Lister les articles_translations
      description: >-
        R√©cup√®re tous les enregistrements de la collection
        **articles_translations**.


        üîç Options possibles :

        - **limit** : limiter le nombre de r√©sultats

        - **offset** : d√©caler pour la pagination

        - **sort** : trier par champ (ex: field1,-field2)

        - **filter** : appliquer des filtres complexes en JSON
      parameters:
        - name: limit
          in: query
          schema:
            type: integer
          description: Nombre max de r√©sultats
        - name: offset
          in: query
          schema:
            type: integer
          description: D√©calage pour la pagination
        - name: sort
          in: query
          schema:
            type: string
          description: "Tri (ex: field1,-field2)"
        - name: filter
          in: query
          schema:
            type: string
          description: Filtres en JSON
      responses:
        "200":
          description: Liste des enregistrements de la collection **articles_translations**
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/articles_translations"
    post:
      summary: Cr√©er un nouvel √©l√©ment dans articles_translations
      description: >-
        Ajoute un enregistrement dans la collection **articles_translations**.

        ‚ö†Ô∏è Pour les champs relationnels (many-to-many), cela ajoute un lien
        entre les deux collections.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/articles_translations"
      responses:
        "201":
          description: Un nouvel enregistrement a √©t√© cr√©√© dans **articles_translations**.
  /items/articles_translations/{id}:
    get:
      summary: Obtenir un articles_translations par ID
      description: Retourne un enregistrement unique de la collection
        **articles_translations** via son ID.
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Enregistrement de la collection **articles_translations** trouv√©
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/articles_translations"
    patch:
      summary: Mettre √† jour un articles_translations
      description: >-
        Met √† jour un enregistrement existant dans la collection
        **articles_translations**.

        ‚ö†Ô∏è Pour les relations many-to-many, vous pouvez modifier les
        associations.
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/articles_translations"
      responses:
        "200":
          description: L'enregistrement de **articles_translations** a √©t√© mis √† jour.
    delete:
      summary: Supprimer un articles_translations
      description: Supprime d√©finitivement un enregistrement de la collection
        **articles_translations** par ID.
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        "204":
          description: L'enregistrement de **articles_translations** a √©t√© supprim√©.
  /items/categories:
    get:
      summary: Lister les categories
      description: |-
        R√©cup√®re tous les enregistrements de la collection **categories**.

        üîç Options possibles :
        - **limit** : limiter le nombre de r√©sultats
        - **offset** : d√©caler pour la pagination
        - **sort** : trier par champ (ex: field1,-field2)
        - **filter** : appliquer des filtres complexes en JSON
      parameters:
        - name: limit
          in: query
          schema:
            type: integer
          description: Nombre max de r√©sultats
        - name: offset
          in: query
          schema:
            type: integer
          description: D√©calage pour la pagination
        - name: sort
          in: query
          schema:
            type: string
          description: "Tri (ex: field1,-field2)"
        - name: filter
          in: query
          schema:
            type: string
          description: Filtres en JSON
      responses:
        "200":
          description: Liste des enregistrements de la collection **categories**
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/categories"
    post:
      summary: Cr√©er un nouvel √©l√©ment dans categories
      description: >-
        Ajoute un enregistrement dans la collection **categories**.

        ‚ö†Ô∏è Pour les champs relationnels (many-to-many), cela ajoute un lien
        entre les deux collections.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/categories"
      responses:
        "201":
          description: Un nouvel enregistrement a √©t√© cr√©√© dans **categories**.
  /items/categories/{id}:
    get:
      summary: Obtenir un categories par ID
      description: Retourne un enregistrement unique de la collection **categories**
        via son ID.
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Enregistrement de la collection **categories** trouv√©
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/categories"
    patch:
      summary: Mettre √† jour un categories
      description: >-
        Met √† jour un enregistrement existant dans la collection **categories**.

        ‚ö†Ô∏è Pour les relations many-to-many, vous pouvez modifier les
        associations.
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/categories"
      responses:
        "200":
          description: L'enregistrement de **categories** a √©t√© mis √† jour.
    delete:
      summary: Supprimer un categories
      description: Supprime d√©finitivement un enregistrement de la collection
        **categories** par ID.
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        "204":
          description: L'enregistrement de **categories** a √©t√© supprim√©.
  /items/commentaires:
    get:
      summary: Lister les commentaires
      description: |-
        R√©cup√®re tous les enregistrements de la collection **commentaires**.

        üîç Options possibles :
        - **limit** : limiter le nombre de r√©sultats
        - **offset** : d√©caler pour la pagination
        - **sort** : trier par champ (ex: field1,-field2)
        - **filter** : appliquer des filtres complexes en JSON
      parameters:
        - name: limit
          in: query
          schema:
            type: integer
          description: Nombre max de r√©sultats
        - name: offset
          in: query
          schema:
            type: integer
          description: D√©calage pour la pagination
        - name: sort
          in: query
          schema:
            type: string
          description: "Tri (ex: field1,-field2)"
        - name: filter
          in: query
          schema:
            type: string
          description: Filtres en JSON
      responses:
        "200":
          description: Liste des enregistrements de la collection **commentaires**
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/commentaires"
    post:
      summary: Cr√©er un nouvel √©l√©ment dans commentaires
      description: >-
        Ajoute un enregistrement dans la collection **commentaires**.

        ‚ö†Ô∏è Pour les champs relationnels (many-to-many), cela ajoute un lien
        entre les deux collections.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/commentaires"
      responses:
        "201":
          description: Un nouvel enregistrement a √©t√© cr√©√© dans **commentaires**.
  /items/commentaires/{id}:
    get:
      summary: Obtenir un commentaires par ID
      description: Retourne un enregistrement unique de la collection **commentaires**
        via son ID.
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Enregistrement de la collection **commentaires** trouv√©
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/commentaires"
    patch:
      summary: Mettre √† jour un commentaires
      description: >-
        Met √† jour un enregistrement existant dans la collection
        **commentaires**.

        ‚ö†Ô∏è Pour les relations many-to-many, vous pouvez modifier les
        associations.
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/commentaires"
      responses:
        "200":
          description: L'enregistrement de **commentaires** a √©t√© mis √† jour.
    delete:
      summary: Supprimer un commentaires
      description: Supprime d√©finitivement un enregistrement de la collection
        **commentaires** par ID.
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        "204":
          description: L'enregistrement de **commentaires** a √©t√© supprim√©.
  /items/languages:
    get:
      summary: Lister les languages
      description: |-
        R√©cup√®re tous les enregistrements de la collection **languages**.

        üîç Options possibles :
        - **limit** : limiter le nombre de r√©sultats
        - **offset** : d√©caler pour la pagination
        - **sort** : trier par champ (ex: field1,-field2)
        - **filter** : appliquer des filtres complexes en JSON
      parameters:
        - name: limit
          in: query
          schema:
            type: integer
          description: Nombre max de r√©sultats
        - name: offset
          in: query
          schema:
            type: integer
          description: D√©calage pour la pagination
        - name: sort
          in: query
          schema:
            type: string
          description: "Tri (ex: field1,-field2)"
        - name: filter
          in: query
          schema:
            type: string
          description: Filtres en JSON
      responses:
        "200":
          description: Liste des enregistrements de la collection **languages**
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/languages"
    post:
      summary: Cr√©er un nouvel √©l√©ment dans languages
      description: >-
        Ajoute un enregistrement dans la collection **languages**.

        ‚ö†Ô∏è Pour les champs relationnels (many-to-many), cela ajoute un lien
        entre les deux collections.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/languages"
      responses:
        "201":
          description: Un nouvel enregistrement a √©t√© cr√©√© dans **languages**.
  /items/languages/{id}:
    get:
      summary: Obtenir un languages par ID
      description: Retourne un enregistrement unique de la collection **languages**
        via son ID.
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Enregistrement de la collection **languages** trouv√©
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/languages"
    patch:
      summary: Mettre √† jour un languages
      description: >-
        Met √† jour un enregistrement existant dans la collection **languages**.

        ‚ö†Ô∏è Pour les relations many-to-many, vous pouvez modifier les
        associations.
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/languages"
      responses:
        "200":
          description: L'enregistrement de **languages** a √©t√© mis √† jour.
    delete:
      summary: Supprimer un languages
      description: Supprime d√©finitivement un enregistrement de la collection
        **languages** par ID.
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        "204":
          description: L'enregistrement de **languages** a √©t√© supprim√©.
  /items/log_actions:
    get:
      summary: Lister les log_actions
      description: |-
        R√©cup√®re tous les enregistrements de la collection **log_actions**.

        üîç Options possibles :
        - **limit** : limiter le nombre de r√©sultats
        - **offset** : d√©caler pour la pagination
        - **sort** : trier par champ (ex: field1,-field2)
        - **filter** : appliquer des filtres complexes en JSON
      parameters:
        - name: limit
          in: query
          schema:
            type: integer
          description: Nombre max de r√©sultats
        - name: offset
          in: query
          schema:
            type: integer
          description: D√©calage pour la pagination
        - name: sort
          in: query
          schema:
            type: string
          description: "Tri (ex: field1,-field2)"
        - name: filter
          in: query
          schema:
            type: string
          description: Filtres en JSON
      responses:
        "200":
          description: Liste des enregistrements de la collection **log_actions**
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/log_actions"
    post:
      summary: Cr√©er un nouvel √©l√©ment dans log_actions
      description: >-
        Ajoute un enregistrement dans la collection **log_actions**.

        ‚ö†Ô∏è Pour les champs relationnels (many-to-many), cela ajoute un lien
        entre les deux collections.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/log_actions"
      responses:
        "201":
          description: Un nouvel enregistrement a √©t√© cr√©√© dans **log_actions**.
  /items/log_actions/{id}:
    get:
      summary: Obtenir un log_actions par ID
      description: Retourne un enregistrement unique de la collection **log_actions**
        via son ID.
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Enregistrement de la collection **log_actions** trouv√©
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/log_actions"
    patch:
      summary: Mettre √† jour un log_actions
      description: >-
        Met √† jour un enregistrement existant dans la collection
        **log_actions**.

        ‚ö†Ô∏è Pour les relations many-to-many, vous pouvez modifier les
        associations.
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/log_actions"
      responses:
        "200":
          description: L'enregistrement de **log_actions** a √©t√© mis √† jour.
    delete:
      summary: Supprimer un log_actions
      description: Supprime d√©finitivement un enregistrement de la collection
        **log_actions** par ID.
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        "204":
          description: L'enregistrement de **log_actions** a √©t√© supprim√©.
  /items/log_publications:
    get:
      summary: Lister les log_publications
      description: |-
        R√©cup√®re tous les enregistrements de la collection **log_publications**.

        üîç Options possibles :
        - **limit** : limiter le nombre de r√©sultats
        - **offset** : d√©caler pour la pagination
        - **sort** : trier par champ (ex: field1,-field2)
        - **filter** : appliquer des filtres complexes en JSON
      parameters:
        - name: limit
          in: query
          schema:
            type: integer
          description: Nombre max de r√©sultats
        - name: offset
          in: query
          schema:
            type: integer
          description: D√©calage pour la pagination
        - name: sort
          in: query
          schema:
            type: string
          description: "Tri (ex: field1,-field2)"
        - name: filter
          in: query
          schema:
            type: string
          description: Filtres en JSON
      responses:
        "200":
          description: Liste des enregistrements de la collection **log_publications**
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/log_publications"
    post:
      summary: Cr√©er un nouvel √©l√©ment dans log_publications
      description: >-
        Ajoute un enregistrement dans la collection **log_publications**.

        ‚ö†Ô∏è Pour les champs relationnels (many-to-many), cela ajoute un lien
        entre les deux collections.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/log_publications"
      responses:
        "201":
          description: Un nouvel enregistrement a √©t√© cr√©√© dans **log_publications**.
  /items/log_publications/{id}:
    get:
      summary: Obtenir un log_publications par ID
      description: Retourne un enregistrement unique de la collection
        **log_publications** via son ID.
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Enregistrement de la collection **log_publications** trouv√©
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/log_publications"
    patch:
      summary: Mettre √† jour un log_publications
      description: >-
        Met √† jour un enregistrement existant dans la collection
        **log_publications**.

        ‚ö†Ô∏è Pour les relations many-to-many, vous pouvez modifier les
        associations.
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/log_publications"
      responses:
        "200":
          description: L'enregistrement de **log_publications** a √©t√© mis √† jour.
    delete:
      summary: Supprimer un log_publications
      description: Supprime d√©finitivement un enregistrement de la collection
        **log_publications** par ID.
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        "204":
          description: L'enregistrement de **log_publications** a √©t√© supprim√©.
  /items/logs_formatting:
    get:
      summary: Lister les logs_formatting
      description: |-
        R√©cup√®re tous les enregistrements de la collection **logs_formatting**.

        üîç Options possibles :
        - **limit** : limiter le nombre de r√©sultats
        - **offset** : d√©caler pour la pagination
        - **sort** : trier par champ (ex: field1,-field2)
        - **filter** : appliquer des filtres complexes en JSON
      parameters:
        - name: limit
          in: query
          schema:
            type: integer
          description: Nombre max de r√©sultats
        - name: offset
          in: query
          schema:
            type: integer
          description: D√©calage pour la pagination
        - name: sort
          in: query
          schema:
            type: string
          description: "Tri (ex: field1,-field2)"
        - name: filter
          in: query
          schema:
            type: string
          description: Filtres en JSON
      responses:
        "200":
          description: Liste des enregistrements de la collection **logs_formatting**
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/logs_formatting"
    post:
      summary: Cr√©er un nouvel √©l√©ment dans logs_formatting
      description: >-
        Ajoute un enregistrement dans la collection **logs_formatting**.

        ‚ö†Ô∏è Pour les champs relationnels (many-to-many), cela ajoute un lien
        entre les deux collections.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/logs_formatting"
      responses:
        "201":
          description: Un nouvel enregistrement a √©t√© cr√©√© dans **logs_formatting**.
  /items/logs_formatting/{id}:
    get:
      summary: Obtenir un logs_formatting par ID
      description: Retourne un enregistrement unique de la collection
        **logs_formatting** via son ID.
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Enregistrement de la collection **logs_formatting** trouv√©
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/logs_formatting"
    patch:
      summary: Mettre √† jour un logs_formatting
      description: >-
        Met √† jour un enregistrement existant dans la collection
        **logs_formatting**.

        ‚ö†Ô∏è Pour les relations many-to-many, vous pouvez modifier les
        associations.
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/logs_formatting"
      responses:
        "200":
          description: L'enregistrement de **logs_formatting** a √©t√© mis √† jour.
    delete:
      summary: Supprimer un logs_formatting
      description: Supprime d√©finitivement un enregistrement de la collection
        **logs_formatting** par ID.
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        "204":
          description: L'enregistrement de **logs_formatting** a √©t√© supprim√©.
  /items/medias:
    get:
      summary: Lister les medias
      description: |-
        R√©cup√®re tous les enregistrements de la collection **medias**.

        üîç Options possibles :
        - **limit** : limiter le nombre de r√©sultats
        - **offset** : d√©caler pour la pagination
        - **sort** : trier par champ (ex: field1,-field2)
        - **filter** : appliquer des filtres complexes en JSON
      parameters:
        - name: limit
          in: query
          schema:
            type: integer
          description: Nombre max de r√©sultats
        - name: offset
          in: query
          schema:
            type: integer
          description: D√©calage pour la pagination
        - name: sort
          in: query
          schema:
            type: string
          description: "Tri (ex: field1,-field2)"
        - name: filter
          in: query
          schema:
            type: string
          description: Filtres en JSON
      responses:
        "200":
          description: Liste des enregistrements de la collection **medias**
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/medias"
    post:
      summary: Cr√©er un nouvel √©l√©ment dans medias
      description: >-
        Ajoute un enregistrement dans la collection **medias**.

        ‚ö†Ô∏è Pour les champs relationnels (many-to-many), cela ajoute un lien
        entre les deux collections.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/medias"
      responses:
        "201":
          description: Un nouvel enregistrement a √©t√© cr√©√© dans **medias**.
  /items/medias/{id}:
    get:
      summary: Obtenir un medias par ID
      description: Retourne un enregistrement unique de la collection **medias** via son ID.
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Enregistrement de la collection **medias** trouv√©
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/medias"
    patch:
      summary: Mettre √† jour un medias
      description: >-
        Met √† jour un enregistrement existant dans la collection **medias**.

        ‚ö†Ô∏è Pour les relations many-to-many, vous pouvez modifier les
        associations.
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/medias"
      responses:
        "200":
          description: L'enregistrement de **medias** a √©t√© mis √† jour.
    delete:
      summary: Supprimer un medias
      description: Supprime d√©finitivement un enregistrement de la collection
        **medias** par ID.
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        "204":
          description: L'enregistrement de **medias** a √©t√© supprim√©.
  /items/newsletters:
    get:
      summary: Lister les newsletters
      description: |-
        R√©cup√®re tous les enregistrements de la collection **newsletters**.

        üîç Options possibles :
        - **limit** : limiter le nombre de r√©sultats
        - **offset** : d√©caler pour la pagination
        - **sort** : trier par champ (ex: field1,-field2)
        - **filter** : appliquer des filtres complexes en JSON
      parameters:
        - name: limit
          in: query
          schema:
            type: integer
          description: Nombre max de r√©sultats
        - name: offset
          in: query
          schema:
            type: integer
          description: D√©calage pour la pagination
        - name: sort
          in: query
          schema:
            type: string
          description: "Tri (ex: field1,-field2)"
        - name: filter
          in: query
          schema:
            type: string
          description: Filtres en JSON
      responses:
        "200":
          description: Liste des enregistrements de la collection **newsletters**
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/newsletters"
    post:
      summary: Cr√©er un nouvel √©l√©ment dans newsletters
      description: >-
        Ajoute un enregistrement dans la collection **newsletters**.

        ‚ö†Ô∏è Pour les champs relationnels (many-to-many), cela ajoute un lien
        entre les deux collections.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/newsletters"
      responses:
        "201":
          description: Un nouvel enregistrement a √©t√© cr√©√© dans **newsletters**.
  /items/newsletters/{id}:
    get:
      summary: Obtenir un newsletters par ID
      description: Retourne un enregistrement unique de la collection **newsletters**
        via son ID.
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Enregistrement de la collection **newsletters** trouv√©
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/newsletters"
    patch:
      summary: Mettre √† jour un newsletters
      description: >-
        Met √† jour un enregistrement existant dans la collection
        **newsletters**.

        ‚ö†Ô∏è Pour les relations many-to-many, vous pouvez modifier les
        associations.
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/newsletters"
      responses:
        "200":
          description: L'enregistrement de **newsletters** a √©t√© mis √† jour.
    delete:
      summary: Supprimer un newsletters
      description: Supprime d√©finitivement un enregistrement de la collection
        **newsletters** par ID.
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        "204":
          description: L'enregistrement de **newsletters** a √©t√© supprim√©.
  /items/newsletters_abonnements:
    get:
      summary: Lister les newsletters_abonnements
      description: >-
        R√©cup√®re tous les enregistrements de la collection
        **newsletters_abonnements**.


        üîç Options possibles :

        - **limit** : limiter le nombre de r√©sultats

        - **offset** : d√©caler pour la pagination

        - **sort** : trier par champ (ex: field1,-field2)

        - **filter** : appliquer des filtres complexes en JSON
      parameters:
        - name: limit
          in: query
          schema:
            type: integer
          description: Nombre max de r√©sultats
        - name: offset
          in: query
          schema:
            type: integer
          description: D√©calage pour la pagination
        - name: sort
          in: query
          schema:
            type: string
          description: "Tri (ex: field1,-field2)"
        - name: filter
          in: query
          schema:
            type: string
          description: Filtres en JSON
      responses:
        "200":
          description: Liste des enregistrements de la collection
            **newsletters_abonnements**
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/newsletters_abonnements"
    post:
      summary: Cr√©er un nouvel √©l√©ment dans newsletters_abonnements
      description: >-
        Ajoute un enregistrement dans la collection **newsletters_abonnements**.

        ‚ö†Ô∏è Pour les champs relationnels (many-to-many), cela ajoute un lien
        entre les deux collections.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/newsletters_abonnements"
      responses:
        "201":
          description: Un nouvel enregistrement a √©t√© cr√©√© dans **newsletters_abonnements**.
  /items/newsletters_abonnements/{id}:
    get:
      summary: Obtenir un newsletters_abonnements par ID
      description: Retourne un enregistrement unique de la collection
        **newsletters_abonnements** via son ID.
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Enregistrement de la collection **newsletters_abonnements** trouv√©
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/newsletters_abonnements"
    patch:
      summary: Mettre √† jour un newsletters_abonnements
      description: >-
        Met √† jour un enregistrement existant dans la collection
        **newsletters_abonnements**.

        ‚ö†Ô∏è Pour les relations many-to-many, vous pouvez modifier les
        associations.
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/newsletters_abonnements"
      responses:
        "200":
          description: L'enregistrement de **newsletters_abonnements** a √©t√© mis √† jour.
    delete:
      summary: Supprimer un newsletters_abonnements
      description: Supprime d√©finitivement un enregistrement de la collection
        **newsletters_abonnements** par ID.
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        "204":
          description: L'enregistrement de **newsletters_abonnements** a √©t√© supprim√©.
  /items/pages:
    get:
      summary: Lister les pages
      description: |-
        R√©cup√®re tous les enregistrements de la collection **pages**.

        üîç Options possibles :
        - **limit** : limiter le nombre de r√©sultats
        - **offset** : d√©caler pour la pagination
        - **sort** : trier par champ (ex: field1,-field2)
        - **filter** : appliquer des filtres complexes en JSON
      parameters:
        - name: limit
          in: query
          schema:
            type: integer
          description: Nombre max de r√©sultats
        - name: offset
          in: query
          schema:
            type: integer
          description: D√©calage pour la pagination
        - name: sort
          in: query
          schema:
            type: string
          description: "Tri (ex: field1,-field2)"
        - name: filter
          in: query
          schema:
            type: string
          description: Filtres en JSON
      responses:
        "200":
          description: Liste des enregistrements de la collection **pages**
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/pages"
    post:
      summary: Cr√©er un nouvel √©l√©ment dans pages
      description: >-
        Ajoute un enregistrement dans la collection **pages**.

        ‚ö†Ô∏è Pour les champs relationnels (many-to-many), cela ajoute un lien
        entre les deux collections.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/pages"
      responses:
        "201":
          description: Un nouvel enregistrement a √©t√© cr√©√© dans **pages**.
  /items/pages/{id}:
    get:
      summary: Obtenir un pages par ID
      description: Retourne un enregistrement unique de la collection **pages** via son ID.
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Enregistrement de la collection **pages** trouv√©
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/pages"
    patch:
      summary: Mettre √† jour un pages
      description: >-
        Met √† jour un enregistrement existant dans la collection **pages**.

        ‚ö†Ô∏è Pour les relations many-to-many, vous pouvez modifier les
        associations.
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/pages"
      responses:
        "200":
          description: L'enregistrement de **pages** a √©t√© mis √† jour.
    delete:
      summary: Supprimer un pages
      description: Supprime d√©finitivement un enregistrement de la collection
        **pages** par ID.
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        "204":
          description: L'enregistrement de **pages** a √©t√© supprim√©.
  /items/segments:
    get:
      summary: Lister les segments
      description: |-
        R√©cup√®re tous les enregistrements de la collection **segments**.

        üîç Options possibles :
        - **limit** : limiter le nombre de r√©sultats
        - **offset** : d√©caler pour la pagination
        - **sort** : trier par champ (ex: field1,-field2)
        - **filter** : appliquer des filtres complexes en JSON
      parameters:
        - name: limit
          in: query
          schema:
            type: integer
          description: Nombre max de r√©sultats
        - name: offset
          in: query
          schema:
            type: integer
          description: D√©calage pour la pagination
        - name: sort
          in: query
          schema:
            type: string
          description: "Tri (ex: field1,-field2)"
        - name: filter
          in: query
          schema:
            type: string
          description: Filtres en JSON
      responses:
        "200":
          description: Liste des enregistrements de la collection **segments**
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/segments"
    post:
      summary: Cr√©er un nouvel √©l√©ment dans segments
      description: >-
        Ajoute un enregistrement dans la collection **segments**.

        ‚ö†Ô∏è Pour les champs relationnels (many-to-many), cela ajoute un lien
        entre les deux collections.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/segments"
      responses:
        "201":
          description: Un nouvel enregistrement a √©t√© cr√©√© dans **segments**.
  /items/segments/{id}:
    get:
      summary: Obtenir un segments par ID
      description: Retourne un enregistrement unique de la collection **segments** via
        son ID.
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Enregistrement de la collection **segments** trouv√©
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/segments"
    patch:
      summary: Mettre √† jour un segments
      description: >-
        Met √† jour un enregistrement existant dans la collection **segments**.

        ‚ö†Ô∏è Pour les relations many-to-many, vous pouvez modifier les
        associations.
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/segments"
      responses:
        "200":
          description: L'enregistrement de **segments** a √©t√© mis √† jour.
    delete:
      summary: Supprimer un segments
      description: Supprime d√©finitivement un enregistrement de la collection
        **segments** par ID.
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        "204":
          description: L'enregistrement de **segments** a √©t√© supprim√©.
  /items/tags:
    get:
      summary: Lister les tags
      description: |-
        R√©cup√®re tous les enregistrements de la collection **tags**.

        üîç Options possibles :
        - **limit** : limiter le nombre de r√©sultats
        - **offset** : d√©caler pour la pagination
        - **sort** : trier par champ (ex: field1,-field2)
        - **filter** : appliquer des filtres complexes en JSON
      parameters:
        - name: limit
          in: query
          schema:
            type: integer
          description: Nombre max de r√©sultats
        - name: offset
          in: query
          schema:
            type: integer
          description: D√©calage pour la pagination
        - name: sort
          in: query
          schema:
            type: string
          description: "Tri (ex: field1,-field2)"
        - name: filter
          in: query
          schema:
            type: string
          description: Filtres en JSON
      responses:
        "200":
          description: Liste des enregistrements de la collection **tags**
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/tags"
    post:
      summary: Cr√©er un nouvel √©l√©ment dans tags
      description: >-
        Ajoute un enregistrement dans la collection **tags**.

        ‚ö†Ô∏è Pour les champs relationnels (many-to-many), cela ajoute un lien
        entre les deux collections.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/tags"
      responses:
        "201":
          description: Un nouvel enregistrement a √©t√© cr√©√© dans **tags**.
  /items/tags/{id}:
    get:
      summary: Obtenir un tags par ID
      description: Retourne un enregistrement unique de la collection **tags** via son ID.
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Enregistrement de la collection **tags** trouv√©
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/tags"
    patch:
      summary: Mettre √† jour un tags
      description: >-
        Met √† jour un enregistrement existant dans la collection **tags**.

        ‚ö†Ô∏è Pour les relations many-to-many, vous pouvez modifier les
        associations.
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/tags"
      responses:
        "200":
          description: L'enregistrement de **tags** a √©t√© mis √† jour.
    delete:
      summary: Supprimer un tags
      description: Supprime d√©finitivement un enregistrement de la collection **tags**
        par ID.
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        "204":
          description: L'enregistrement de **tags** a √©t√© supprim√©.
  /items/tags_actualites_1:
    get:
      summary: Lister les tags_actualites_1
      description: >-
        R√©cup√®re tous les enregistrements de la collection
        **tags_actualites_1**.


        üîç Options possibles :

        - **limit** : limiter le nombre de r√©sultats

        - **offset** : d√©caler pour la pagination

        - **sort** : trier par champ (ex: field1,-field2)

        - **filter** : appliquer des filtres complexes en JSON
      parameters:
        - name: limit
          in: query
          schema:
            type: integer
          description: Nombre max de r√©sultats
        - name: offset
          in: query
          schema:
            type: integer
          description: D√©calage pour la pagination
        - name: sort
          in: query
          schema:
            type: string
          description: "Tri (ex: field1,-field2)"
        - name: filter
          in: query
          schema:
            type: string
          description: Filtres en JSON
      responses:
        "200":
          description: Liste des enregistrements de la collection **tags_actualites_1**
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/tags_actualites_1"
    post:
      summary: Cr√©er un nouvel √©l√©ment dans tags_actualites_1
      description: >-
        Ajoute un enregistrement dans la collection **tags_actualites_1**.

        ‚ö†Ô∏è Pour les champs relationnels (many-to-many), cela ajoute un lien
        entre les deux collections.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/tags_actualites_1"
      responses:
        "201":
          description: Un nouvel enregistrement a √©t√© cr√©√© dans **tags_actualites_1**.
  /items/tags_actualites_1/{id}:
    get:
      summary: Obtenir un tags_actualites_1 par ID
      description: Retourne un enregistrement unique de la collection
        **tags_actualites_1** via son ID.
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Enregistrement de la collection **tags_actualites_1** trouv√©
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/tags_actualites_1"
    patch:
      summary: Mettre √† jour un tags_actualites_1
      description: >-
        Met √† jour un enregistrement existant dans la collection
        **tags_actualites_1**.

        ‚ö†Ô∏è Pour les relations many-to-many, vous pouvez modifier les
        associations.
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/tags_actualites_1"
      responses:
        "200":
          description: L'enregistrement de **tags_actualites_1** a √©t√© mis √† jour.
    delete:
      summary: Supprimer un tags_actualites_1
      description: Supprime d√©finitivement un enregistrement de la collection
        **tags_actualites_1** par ID.
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        "204":
          description: L'enregistrement de **tags_actualites_1** a √©t√© supprim√©.
  /items/tags_articles_1:
    get:
      summary: Lister les tags_articles_1
      description: |-
        R√©cup√®re tous les enregistrements de la collection **tags_articles_1**.

        üîç Options possibles :
        - **limit** : limiter le nombre de r√©sultats
        - **offset** : d√©caler pour la pagination
        - **sort** : trier par champ (ex: field1,-field2)
        - **filter** : appliquer des filtres complexes en JSON
      parameters:
        - name: limit
          in: query
          schema:
            type: integer
          description: Nombre max de r√©sultats
        - name: offset
          in: query
          schema:
            type: integer
          description: D√©calage pour la pagination
        - name: sort
          in: query
          schema:
            type: string
          description: "Tri (ex: field1,-field2)"
        - name: filter
          in: query
          schema:
            type: string
          description: Filtres en JSON
      responses:
        "200":
          description: Liste des enregistrements de la collection **tags_articles_1**
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/tags_articles_1"
    post:
      summary: Cr√©er un nouvel √©l√©ment dans tags_articles_1
      description: >-
        Ajoute un enregistrement dans la collection **tags_articles_1**.

        ‚ö†Ô∏è Pour les champs relationnels (many-to-many), cela ajoute un lien
        entre les deux collections.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/tags_articles_1"
      responses:
        "201":
          description: Un nouvel enregistrement a √©t√© cr√©√© dans **tags_articles_1**.
  /items/tags_articles_1/{id}:
    get:
      summary: Obtenir un tags_articles_1 par ID
      description: Retourne un enregistrement unique de la collection
        **tags_articles_1** via son ID.
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Enregistrement de la collection **tags_articles_1** trouv√©
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/tags_articles_1"
    patch:
      summary: Mettre √† jour un tags_articles_1
      description: >-
        Met √† jour un enregistrement existant dans la collection
        **tags_articles_1**.

        ‚ö†Ô∏è Pour les relations many-to-many, vous pouvez modifier les
        associations.
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/tags_articles_1"
      responses:
        "200":
          description: L'enregistrement de **tags_articles_1** a √©t√© mis √† jour.
    delete:
      summary: Supprimer un tags_articles_1
      description: Supprime d√©finitivement un enregistrement de la collection
        **tags_articles_1** par ID.
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        "204":
          description: L'enregistrement de **tags_articles_1** a √©t√© supprim√©.
  /items/utilisateurs:
    get:
      summary: Lister les utilisateurs
      description: |-
        R√©cup√®re tous les enregistrements de la collection **utilisateurs**.

        üîç Options possibles :
        - **limit** : limiter le nombre de r√©sultats
        - **offset** : d√©caler pour la pagination
        - **sort** : trier par champ (ex: field1,-field2)
        - **filter** : appliquer des filtres complexes en JSON
      parameters:
        - name: limit
          in: query
          schema:
            type: integer
          description: Nombre max de r√©sultats
        - name: offset
          in: query
          schema:
            type: integer
          description: D√©calage pour la pagination
        - name: sort
          in: query
          schema:
            type: string
          description: "Tri (ex: field1,-field2)"
        - name: filter
          in: query
          schema:
            type: string
          description: Filtres en JSON
      responses:
        "200":
          description: Liste des enregistrements de la collection **utilisateurs**
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/utilisateurs"
    post:
      summary: Cr√©er un nouvel √©l√©ment dans utilisateurs
      description: >-
        Ajoute un enregistrement dans la collection **utilisateurs**.

        ‚ö†Ô∏è Pour les champs relationnels (many-to-many), cela ajoute un lien
        entre les deux collections.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/utilisateurs"
      responses:
        "201":
          description: Un nouvel enregistrement a √©t√© cr√©√© dans **utilisateurs**.
  /items/utilisateurs/{id}:
    get:
      summary: Obtenir un utilisateurs par ID
      description: Retourne un enregistrement unique de la collection **utilisateurs**
        via son ID.
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Enregistrement de la collection **utilisateurs** trouv√©
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/utilisateurs"
    patch:
      summary: Mettre √† jour un utilisateurs
      description: >-
        Met √† jour un enregistrement existant dans la collection
        **utilisateurs**.

        ‚ö†Ô∏è Pour les relations many-to-many, vous pouvez modifier les
        associations.
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/utilisateurs"
      responses:
        "200":
          description: L'enregistrement de **utilisateurs** a √©t√© mis √† jour.
    delete:
      summary: Supprimer un utilisateurs
      description: Supprime d√©finitivement un enregistrement de la collection
        **utilisateurs** par ID.
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        "204":
          description: L'enregistrement de **utilisateurs** a √©t√© supprim√©.
components:
  schemas:
    abonnements:
      type: object
      description: Sch√©ma de la collection **abonnements**
      properties:
        id:
          type: integer
        date_created:
          type: string
          format: date-time
        date_updated:
          type: string
          format: date-time
        user:
          type: integer
        actif:
          type: boolean
        date_desactivation:
          type: string
          format: date-time
      required:
        - user
    actualites:
      type: object
      description: Sch√©ma de la collection **actualites**
      properties:
        id:
          type: integer
        date_created:
          type: string
          format: date-time
        date_updated:
          type: string
          format: date-time
        titre:
          type: string
        contenu:
          type: string
        image:
          type: string
        etat:
          type: string
        auteur:
          type: integer
        slug:
          type: string
        mise_en_avant:
          type: boolean
      required:
        - titre
        - contenu
        - auteur
        - slug
    articles:
      type: object
      description: Sch√©ma de la collection **articles**
      properties:
        id:
          type: integer
        date_created:
          type: string
          format: date-time
        date_updated:
          type: string
          format: date-time
        titre:
          type: string
        slug:
          type: string
        etat:
          type: string
        date_publication:
          type: string
          format: date-time
        categorie:
          type: integer
        contenu:
          type: string
        image_couverture:
          type: integer
        auteur:
          type: integer
        page_associee:
          type: integer
        translations:
          type: string
        tags:
          type: string
      required:
        - titre
        - slug
        - contenu
    articles_tags:
      type: object
      description: Sch√©ma de la collection **articles_tags**
      properties:
        id:
          type: integer
        articles_id:
          type: integer
        tags_id:
          type: integer
    articles_translations:
      type: object
      description: Sch√©ma de la collection **articles_translations**
      properties:
        id:
          type: integer
        articles_id:
          type: integer
        languages_code:
          type: string
        titre:
          type: string
        slug:
          type: string
        contenu:
          type: string
    categories:
      type: object
      description: Sch√©ma de la collection **categories**
      properties:
        id:
          type: integer
        date_created:
          type: string
          format: date-time
        date_updated:
          type: string
          format: date-time
        nom:
          type: string
        slug:
          type: string
        ordre:
          type: integer
        icone:
          type: integer
        active:
          type: boolean
      required:
        - nom
    commentaires:
      type: object
      description: Sch√©ma de la collection **commentaires**
      properties:
        id:
          type: integer
        date_created:
          type: string
          format: date-time
        date_updated:
          type: string
          format: date-time
        article:
          type: integer
        contenu:
          type: string
        statut:
          type: string
        utilisateur:
          type: integer
        motif_rejet:
          type: string
      required:
        - contenu
        - utilisateur
    languages:
      type: object
      description: Sch√©ma de la collection **languages**
      properties:
        code:
          type: string
        name:
          type: string
        direction:
          type: string
    log_actions:
      type: object
      description: Sch√©ma de la collection **log_actions**
      properties:
        id:
          type: integer
        date_created:
          type: string
          format: date-time
        date_updated:
          type: string
          format: date-time
        utilisateur:
          type: integer
        action:
          type: string
        cible:
          type: string
        element_id:
          type: string
      required:
        - utilisateur
    log_publications:
      type: object
      description: Sch√©ma de la collection **log_publications**
      properties:
        id:
          type: integer
        status:
          type: string
        user_created:
          type: string
        date_created:
          type: string
          format: date-time
        date_updated:
          type: string
          format: date-time
        type_action:
          type: string
        article:
          type: integer
        acteur:
          type: integer
      required:
        - type_action
        - article
    logs_formatting:
      type: object
      description: Sch√©ma de la collection **logs_formatting**
      properties:
        id:
          type: integer
        date_created:
          type: string
          format: date-time
        date_updated:
          type: string
          format: date-time
        champ:
          type: string
        ancienne_valeur:
          type: string
        valeur_normalisee:
          type: string
    medias:
      type: object
      description: Sch√©ma de la collection **medias**
      properties:
        id:
          type: integer
        date_created:
          type: string
          format: date-time
        date_updated:
          type: string
          format: date-time
        titre:
          type: string
        description:
          type: string
        type:
          type: string
        fichier_image:
          type: string
        fichier_video:
          type: string
        fichier_audio:
          type: string
        fichier_pdf:
          type: string
        fichier_autre:
          type: string
      required:
        - titre
        - type
    newsletters:
      type: object
      description: Sch√©ma de la collection **newsletters**
      properties:
        id:
          type: integer
        date_created:
          type: string
          format: date-time
        date_updated:
          type: string
          format: date-time
        titre:
          type: string
        contenu:
          type: string
        envoyee:
          type: boolean
        slug:
          type: string
        auteur:
          type: integer
        statut:
          type: string
        date_envoi:
          type: string
          format: date-time
        abonnes:
          type: string
      required:
        - titre
        - contenu
        - statut
    newsletters_abonnements:
      type: object
      description: Sch√©ma de la collection **newsletters_abonnements**
      properties:
        id:
          type: integer
        newsletters_id:
          type: integer
        abonnements_id:
          type: integer
    pages:
      type: object
      description: Sch√©ma de la collection **pages**
      properties:
        id:
          type: integer
        date_created:
          type: string
          format: date-time
        date_updated:
          type: string
          format: date-time
        titre:
          type: string
        slug:
          type: string
        contenu:
          type: string
        etat:
          type: string
        ordre:
          type: integer
        banniere:
          type: integer
      required:
        - etat
    segments:
      type: object
      description: Sch√©ma de la collection **segments**
      properties:
        id:
          type: integer
        date_created:
          type: string
          format: date-time
        date_updated:
          type: string
          format: date-time
    tags:
      type: object
      description: Sch√©ma de la collection **tags**
      properties:
        id:
          type: integer
        date_created:
          type: string
          format: date-time
        date_updated:
          type: string
          format: date-time
        nom:
          type: string
        slug:
          type: string
        type_tag:
          type: string
        articles:
          type: string
        actualites:
          type: string
      required:
        - nom
    tags_actualites_1:
      type: object
      description: Sch√©ma de la collection **tags_actualites_1**
      properties:
        id:
          type: integer
        tags_id:
          type: integer
        actualites_id:
          type: integer
    tags_articles_1:
      type: object
      description: Sch√©ma de la collection **tags_articles_1**
      properties:
        id:
          type: integer
        tags_id:
          type: integer
        articles_id:
          type: integer
    utilisateurs:
      type: object
      description: Sch√©ma de la collection **utilisateurs**
      properties:
        id:
          type: integer
        date_created:
          type: string
          format: date-time
        date_updated:
          type: string
          format: date-time
        prenom:
          type: string
        nom:
          type: string
        bio:
          type: string
        email:
          type: string
        role:
          type: string
        user_id:
          type: string
        photo:
          type: integer
        note_interne:
          type: string
        validation_admin:
          type: boolean
        statut_contribution:
          type: string
        niveau_confiance:
          type: string
        tags_expertise:
          type: object
        linkedin_url:
          type: string
        twitter_handle:
          type: string
      required:
        - prenom
        - nom
        - email
        - role
        - photo
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: "‚ö†Ô∏è Ajoutez `Authorization: Bearer <token>` pour acc√©der aux
        endpoints prot√©g√©s."
security:
  - bearerAuth: []
